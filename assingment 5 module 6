{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM4UPcZxQbutIDZlTFB1aDX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"TLP51y5_nq3S"},"outputs":[],"source":["#1 What are the five key concepts of Object-Oriented Programming (OOP) ?\n","* The five key concepts of Object-Oriented Programming (OOP) are:\n"," 1. Encapsulation\n"," • Encapsulation is the practice of bundling data (attributes) and methods (functions) that operate on that data into a single unit, called an object.\n"," • Access to the internal state of an object is restricted, and interaction with the object happens through public methods (also known as getters and setters). This helps ensure data integrity and reduces complexity.\n","Example:\n","\n","class Person:\n","    def __init__(self, name, age):\n","        self.__name = name  # Private attribute\n","        self.__age = age    # Private attribute\n","\n","    def get_name(self):\n","        return self.__name\n","\n","    def set_name(self, name):\n","        self.__name = name\n","\n","\n"," 2. Abstraction\n"," • Abstraction focuses on exposing only essential details and hiding the implementation complexities.\n"," • It allows you to define clear interfaces and abstract behavior, enabling easier interaction and better code design.\n","Example:\n","\n","from abc import ABC, abstractmethod\n","\n","class Animal(ABC):\n","    @abstractmethod\n","    def make_sound(self):\n","        pass\n","\n","class Dog(Animal):\n","    def make_sound(self):\n","        return \"Bark\"\n","\n","\n"," 3. Inheritance\n"," • Inheritance allows a class (child class) to inherit properties and behaviors from another class (parent class).\n"," • It promotes code reuse and establishes relationships between classes.\n","Example:\n","\n","class Animal:\n","    def __init__(self, name):\n","        self.name = name\n","\n","    def move(self):\n","        return f\"{self.name} is moving\"\n","\n","class Bird(Animal):\n","    def fly(self):\n","        return f\"{self.name} is flying\"\n","\n","\n"," 4. Polymorphism\n"," • Polymorphism means “many forms.” It allows methods in different classes to have the same name but behave differently.\n"," • This is often achieved using method overriding or method overloading.\n","Example:\n","\n","class Shape:\n","    def area(self):\n","        pass\n","\n","class Rectangle(Shape):\n","    def __init__(self, width, height):\n","        self.width = width\n","        self.height = height\n","\n","    def area(self):\n","        return self.width * self.height\n","\n","class Circle(Shape):\n","    def __init__(self, radius):\n","        self.radius = radius\n","\n","    def area(self):\n","        return 3.14 * self.radius * self.radius\n","\n","\n"," 5. Composition\n"," • Composition refers to building complex objects by combining simpler ones. It is achieved by including objects of other classes as attributes within a class.\n"," • This allows flexibility and avoids the limitations of a rigid inheritance hierarchy.\n","Example:\n","\n","class Engine:\n","    def start(self):\n","        return \"Engine started\"\n","\n","class Car:\n","    def __init__(self, engine):\n","        self.engine = engine\n","\n","    def drive(self):\n","        return self.engine.start()\n","\n","\n","\n","These concepts form the foundation of OOP and make it a powerful paradigm for designing scalable, reusable, and maintainable software.\n","\n","#2 Write a Python class for a `Car` with attributes for `make`, `model`, and `year`. Include a method to display\n","the car's information ?\n","\n","* class Car:\n","    def __init__(self, make, model, year):\n","        \"\"\"\n","        Initialize the car with its make, model, and year.\n","        \"\"\"\n","        self.make = make\n","        self.model = model\n","        self.year = year\n","\n","    def display_info(self):\n","        \"\"\"\n","        Display the car's information in a readable format.\n","        \"\"\"\n","        print(f\"{self.year} {self.make} {self.model}\")\n","\n","# Example usage:\n","car = Car(\"Toyota\", \"Corolla\", 2022)\n","car.display_info()  # Output: 2022 Toyota Corolla\n","\n","#3  Explain the difference between instance methods and class methods. Provide an example of each.?\n","\n","*    In Python, instance methods and class methods are two types of methods in a class, differing in how they are defined and what they act upon. Here’s an explanation of each:\n","\n","1. Instance Method\n","\n"," • Definition: Methods that work with a specific instance of a class.\n"," • How it works:\n"," • Always have self as the first parameter, representing the instance the method is called on.\n"," • Can access and modify instance attributes and call other instance methods.\n","\n","Example:\n","\n","class Dog:\n","    def __init__(self, name, breed):\n","        self.name = name  # Instance attribute\n","        self.breed = breed\n","\n","    def bark(self):\n","        # Instance method that uses instance attributes\n","        return f\"{self.name} says Woof!\"\n","\n","# Usage\n","my_dog = Dog(\"Buddy\", \"Golden Retriever\")\n","print(my_dog.bark())  # Output: Buddy says Woof!\n","\n","Here, bark is an instance method because it operates on the my_dog instance and accesses its name attribute.\n","\n","2. Class Method\n","\n"," • Definition: Methods that work with the class itself, rather than an instance.\n"," • How it works:\n"," • Always have cls as the first parameter, representing the class.\n"," • Defined using the @classmethod decorator.\n"," • Typically used for creating alternative constructors or modifying class-level attributes.\n","\n","Example:\n","\n","class Dog:\n","    species = \"Canis lupus familiaris\"  # Class attribute\n","\n","    def __init__(self, name, breed):\n","        self.name = name\n","        self.breed = breed\n","\n","    @classmethod\n","    def set_species(cls, new_species):\n","        # Class method to modify class-level attribute\n","        cls.species = new_species\n","\n","# Usage\n","print(Dog.species)  # Output: Canis lupus familiaris\n","Dog.set_species(\"Canis lupus\")\n","print(Dog.species)  # Output: Canis lupus\n","\n","Here, set_species is a class method because it modifies the class attribute species for all instances of the Dog class.\n","\n","Key Differences:\n","\n","Feature Instance Method Class Method\n","Decorator None @classmethod\n","First Parameter self (instance) cls (class)\n","Scope Operates on a specific instance Operates on the class itself\n","Use Case Instance-specific behavior or data Class-level operations or factories\n","\n","#4  How does Python implement method overloading? Give an example.?\n","\n","* Python does not support traditional method overloading as seen in languages like Java or C++. In Python, if multiple methods\n"," with the same name are defined within a class, the last definition will overwrite the previous ones. However, Python provides flexibility\n"," to achieve the effect of method overloading using:\n"," 1. Default Arguments\n"," 2. Variable-Length Arguments (*args, **kwargs)\n"," 3. Type Checking (isinstance)\n","\n","Here’s an example of how Python achieves method overloading:\n","\n","1. Using Default Arguments\n","\n","class Calculator:\n","    def add(self, a, b=0):\n","        return a + b\n","\n","# Usage\n","calc = Calculator()\n","print(calc.add(5))      # Uses default for `b` -> Output: 5\n","print(calc.add(5, 10))  # Explicitly provides both arguments -> Output: 15\n","\n","Here, add behaves differently based on whether one or two arguments are passed.\n","\n","2. Using Variable-Length Arguments\n","\n","class Calculator:\n","    def add(self, *args):\n","        return sum(args)\n","\n","# Usage\n","calc = Calculator()\n","print(calc.add(5))            # Output: 5\n","print(calc.add(5, 10))        # Output: 15\n","print(calc.add(1, 2, 3, 4))   # Output: 10\n","\n","The *args parameter allows the add method to accept any number of arguments, simulating overloading.\n","\n","3. Using Type Checking\n","\n","class Calculator:\n","    def operate(self, a, b=None):\n","        if b is None:  # Single argument\n","            return a * a  # Square the number\n","        elif isinstance(a, str) and isinstance(b, str):  # Strings\n","            return a + b  # Concatenate strings\n","        else:  # Default for numbers\n","            return a + b\n","\n","# Usage\n","calc = Calculator()\n","print(calc.operate(5))             # Single argument -> Output: 25 (square)\n","print(calc.operate(5, 10))         # Two numbers -> Output: 15 (sum)\n","print(calc.operate(\"Hello, \", \"World!\"))  # Strings -> Output: Hello, World!\n","\n","Here, the operate method behaves differently based on the number and type of arguments passed, achieving overloading behavior.\n","\n","#5  What are the three types of access modifiers in Python? How are they denoted ?\n","\n","* In Python, access modifiers determine the visibility of variables, methods, and attributes within a class.\n"," Python uses naming conventions to specify three types of access:\n","\n","1. Public Access\n","\n"," • Description: Attributes and methods with public access can be accessed from anywhere (inside or outside the class).\n"," • Denotation: No special prefix; the name is written as-is.\n"," • Example:\n","\n","class Example:\n","    def __init__(self):\n","        self.public_var = \"I am public\"\n","\n","    def public_method(self):\n","        return \"This is a public method\"\n","\n","obj = Example()\n","print(obj.public_var)  # Accessible\n","print(obj.public_method())  # Accessible\n","\n","\n","\n","2. Protected Access\n","\n"," • Description: Attributes and methods with protected access are intended to be accessed only within the class and its subclasses.\n"," • Denotation: A single underscore (_) prefix before the name.\n"," • Example:\n","\n","class Example:\n","    def __init__(self):\n","        self._protected_var = \"I am protected\"\n","\n","    def _protected_method(self):\n","        return \"This is a protected method\"\n","\n","class Subclass(Example):\n","    def access_protected(self):\n","        return self._protected_method()\n","\n","obj = Subclass()\n","print(obj._protected_var)  # Technically accessible, but should be treated as protected\n","print(obj.access_protected())  # Accessed via a subclass method\n","\n","\n","\n","3. Private Access\n","\n"," • Description: Attributes and methods with private access are intended to be accessed only within the class where they are defined.\n"," • Denotation: A double underscore (__) prefix before the name.\n"," • Note: Python uses name mangling to make private attributes harder to access directly (e.g., __var becomes _ClassName__var).\n"," • Example:\n","\n","class Example:\n","    def __init__(self):\n","        self.__private_var = \"I am private\"\n","\n","    def __private_method(self):\n","        return \"This is a private method\"\n","\n","    def access_private(self):\n","        return self.__private_method()\n","\n","obj = Example()\n","# print(obj.__private_var)  # AttributeError: not directly accessible\n","print(obj._Example__private_var)  # Accessible via name mangling\n","print(obj.access_private())  # Accessed through a public method\n","\n","Summary of Denotation:\n","\n"," • Public: No prefix (e.g., variable)\n"," • Protected: Single underscore (e.g., _variable)\n"," • Private: Double underscore (e.g., __variable)\n","\n","#6. Describe the five types of inheritance in Python. Provide a simple example of multiple inheritance.?\n","\n","* In Python, inheritance is a mechanism that allows a class (child class) to derive properties and behaviors from another\n","class (parent class). There are five types of inheritance in Python:\n","\n","1. Single Inheritance\n","\n","A child class inherits from a single parent class.\n","\n","class Parent:\n","    def greet(self):\n","        print(\"Hello from Parent\")\n","\n","class Child(Parent):\n","    def greet_child(self):\n","        print(\"Hello from Child\")\n","\n","obj = Child()\n","obj.greet()        # Output: Hello from Parent\n","obj.greet_child()  # Output: Hello from Child\n","\n","2. Multiple Inheritance\n","\n","A child class inherits from more than one parent class.\n","\n","class Parent1:\n","    def greet_parent1(self):\n","        print(\"Hello from Parent1\")\n","\n","class Parent2:\n","    def greet_parent2(self):\n","        print(\"Hello from Parent2\")\n","\n","class Child(Parent1, Parent2):\n","    def greet_child(self):\n","        print(\"Hello from Child\")\n","\n","obj = Child()\n","obj.greet_parent1()  # Output: Hello from Parent1\n","obj.greet_parent2()  # Output: Hello from Parent2\n","obj.greet_child()    # Output: Hello from Child\n","\n","3. Multilevel Inheritance\n","\n","A class is derived from a child class, which itself is derived from another parent class.\n","\n","class Grandparent:\n","    def greet_grandparent(self):\n","        print(\"Hello from Grandparent\")\n","\n","class Parent(Grandparent):\n","    def greet_parent(self):\n","        print(\"Hello from Parent\")\n","\n","class Child(Parent):\n","    def greet_child(self):\n","        print(\"Hello from Child\")\n","\n","obj = Child()\n","obj.greet_grandparent()  # Output: Hello from Grandparent\n","obj.greet_parent()       # Output: Hello from Parent\n","obj.greet_child()        # Output: Hello from Child\n","\n","4. Hierarchical Inheritance\n","\n","Multiple child classes inherit from a single parent class.\n","\n","class Parent:\n","    def greet(self):\n","        print(\"Hello from Parent\")\n","\n","class Child1(Parent):\n","    def greet_child1(self):\n","        print(\"Hello from Child1\")\n","\n","class Child2(Parent):\n","    def greet_child2(self):\n","        print(\"Hello from Child2\")\n","\n","obj1 = Child1()\n","obj2 = Child2()\n","\n","obj1.greet()       # Output: Hello from Parent\n","obj1.greet_child1() # Output: Hello from Child1\n","\n","obj2.greet()       # Output: Hello from Parent\n","obj2.greet_child2() # Output: Hello from Child2\n","\n","5. Hybrid Inheritance\n","\n","A combination of two or more types of inheritance.\n","\n","class Parent:\n","    def greet(self):\n","        print(\"Hello from Parent\")\n","\n","class Child1(Parent):\n","    def greet_child1(self):\n","        print(\"Hello from Child1\")\n","\n","class Child2(Parent):\n","    def greet_child2(self):\n","        print(\"Hello from Child2\")\n","\n","class GrandChild(Child1, Child2):\n","    def greet_grandchild(self):\n","        print(\"Hello from GrandChild\")\n","\n","obj = GrandChild()\n","obj.greet()            # Output: Hello from Parent\n","obj.greet_child1()     # Output: Hello from Child1\n","obj.greet_child2()     # Output: Hello from Child2\n","obj.greet_grandchild() # Output: Hello from GrandChild\n","\n","In the Multiple Inheritance example provided earlier, the Child class inherits from both Parent1 and Parent2.\n"," This allows the child class to access methods from both parent classes.\n","\n","#7. What is the Method Resolution Order (MRO) in Python? How can you retrieve it programmatically?\n","\n","* The MRO is based on the C3 Linearization Algorithm, which ensures that:\n"," 1. A child class is checked before its parents.\n"," 2. Parents are checked in the order they are listed in the inheritance tuple.\n"," 3. The search respects the hierarchy’s order and avoids visiting any class more than once.\n","\n","How to Retrieve the MRO Programmatically\n","\n","You can retrieve the MRO of a class using either of these methods:\n"," 1. The mro attribute:\n","\n","class A:\n","    pass\n","\n","class B(A):\n","    pass\n","\n","class C(B):\n","    pass\n","\n","print(C.__mro__)\n","\n","Output:\n","\n","(<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)\n","\n","\n"," 2. The mro() method:\n","\n","print(C.mro())\n","\n","Output:\n","\n","[<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>]\n","\n","\n","\n","Both methods provide the same information, but mro() returns the MRO as a list, while mro returns a tuple.\n","\n","Why Is MRO Important?\n","\n"," • It avoids ambiguity in method resolution, especially in cases of diamond inheritance (where multiple inheritance paths lead to the same base class).\n"," • It ensures that methods and attributes are inherited in a predictable manner.\n","\n","Here’s an example of how MRO resolves ambiguity in multiple inheritance:\n","\n","class A:\n","    def show(self):\n","        print(\"A\")\n","\n","class B(A):\n","    def show(self):\n","        print(\"B\")\n","\n","class C(A):\n","    def show(self):\n","        print(\"C\")\n","\n","class D(B, C):\n","    pass\n","\n","d = D()\n","d.show()\n","print(D.mro())\n","\n","Output:\n","\n","B\n","[<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>]\n","\n","In this case, the MRO ensures that B.show is called before C.show.\n","\n","#8. Create an abstract base class `Shape` with an abstract method `area()`. Then create two subclasses\n","`Circle` and `Rectangle` that implement the `area()` method.?\n","\n","* Here’s an implementation of an abstract base class Shape with an abstract method Area(), and two subclasses Circle and Rectangle that implement the Area() method.\n","\n","Code:\n","\n","from abc import ABC, abstractmethod\n","import math\n","\n","# Abstract base class\n","class Shape(ABC):\n","    @abstractmethod\n","    def Area(self):\n","        pass\n","\n","# Circle subclass\n","class Circle(Shape):\n","    def __init__(self, radius):\n","        self.radius = radius\n","\n","    def Area(self):\n","        return math.pi * self.radius ** 2\n","\n","# Rectangle subclass\n","class Rectangle(Shape):\n","    def __init__(self, width, height):\n","        self.width = width\n","        self.height = height\n","\n","    def Area(self):\n","        return self.width * self.height\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    circle = Circle(radius=5)\n","    rectangle = Rectangle(width=4, height=6)\n","\n","    print(f\"Area of the circle: {circle.Area():.2f}\")\n","    print(f\"Area of the rectangle: {rectangle.Area():.2f}\")\n","\n","#9 Demonstrate polymorphism by creating a function that can work with different shape objects to calculate\n","and print their areas.?\n","\n","* Polymorphism is a concept in object-oriented programming that allows methods or functions to process objects of different types\n"," through a uniform interface. Below is an example of polymorphism in Python, where a function calculates the area of different shapes (e.g., Circle, Rectangle, Triangle) based on their respective implementations of an area method.\n","\n","Code Example\n","\n","import math\n","\n","# Base class for shapes\n","class Shape:\n","    def area(self):\n","        raise NotImplementedError(\"Subclasses must implement the area method\")\n","\n","# Circle class\n","class Circle(Shape):\n","    def __init__(self, radius):\n","        self.radius = radius\n","\n","    def area(self):\n","        return math.pi * self.radius ** 2\n","\n","# Rectangle class\n","class Rectangle(Shape):\n","    def __init__(self, width, height):\n","        self.width = width\n","        self.height = height\n","\n","    def area(self):\n","        return self.width * self.height\n","\n","# Triangle class\n","class Triangle(Shape):\n","    def __init__(self, base, height):\n","        self.base = base\n","        self.height = height\n","\n","    def area(self):\n","        return 0.5 * self.base * self.height\n","\n","# Function to print the area of any shape\n","def print_area(shape):\n","    if not isinstance(shape, Shape):\n","        raise TypeError(\"The object must be a Shape\")\n","    print(f\"The area is: {shape.area()}\")\n","\n","# Demonstrating polymorphism\n","circle = Circle(5)  # Circle with radius 5\n","rectangle = Rectangle(4, 7)  # Rectangle with width 4 and height 7\n","triangle = Triangle(6, 3)  # Triangle with base 6 and height 3\n","\n","shapes = [circle, rectangle, triangle]\n","for shape in shapes:\n","    print_area(shape)\n","\n","Output\n","\n","The area is: 78.53981633974483\n","The area is: 28\n","The area is: 9.0\n","\n","#10. Implement encapsulation in a `BankAccount` class with private attributes for `balance` and\n","`account_number`. Include methods for deposit, withdrawal, and balance inquiry.\n","\n","* here is an implemantaion of a BankAccount class with encapsulation:\n"," class BankAccount:\n","    def __init__(self, account_number, initial_balance=0):\n","        self.__account_number = account_number  # Private attribute\n","        self.__balance = initial_balance       # Private attribute\n","\n","    # Method to deposit money\n","    def deposit(self, amount):\n","        if amount > 0:\n","            self.__balance += amount\n","            print(f\"Deposit successful! New balance: {self.__balance}\")\n","        else:\n","            print(\"Deposit amount must be positive.\")\n","\n","    # Method to withdraw money\n","    def withdraw(self, amount):\n","        if amount > 0:\n","            if amount <= self.__balance:\n","                self.__balance -= amount\n","                print(f\"Withdrawal successful! New balance: {self.__balance}\")\n","            else:\n","                print(\"Insufficient balance.\")\n","        else:\n","            print(\"Withdrawal amount must be positive.\")\n","\n","    # Method to inquire balance\n","    def get_balance(self):\n","        return self.__balance\n","\n","    # Method to get account number (if needed)\n","    def get_account_number(self):\n","        return self.__account_number\n","\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Creating a bank account\n","    account = BankAccount(\"12345678\", 1000)\n","\n","    # Deposit money\n","    account.deposit(500)\n","\n","    # Withdraw money\n","    account.withdraw(300)\n","\n","    # Inquiry balance\n","    print(f\"Current balance: {account.get_balance()}\")\n","\n","    # Attempt invalid operations\n","    account.deposit(-100)\n","    account.withdraw(2000)\n","\n","#11. Write a class that overrides the `__str__` and `__add__` magic methods. What will these methods allow\n","you to do?\n","\n","* Here’s an example of a Python class that overrides the str and add magic methods:\n","\n","class CustomString:\n","    def __init__(self, value):\n","        self.value = str(value)\n","\n","    def __str__(self):\n","        \"\"\"Return a string representation of the object.\"\"\"\n","        return self.value\n","\n","    def __add__(self, other):\n","        \"\"\"\n","        Define how the + operator works for this class.\n","        For this example, concatenates the current value with another string.\n","        \"\"\"\n","        if isinstance(other, CustomString):\n","            return CustomString(self.value + other.value)\n","        elif isinstance(other, str):\n","            return CustomString(self.value + other)\n","        else:\n","            raise TypeError(\"Can only add a string or CustomString object\")\n","\n","Explanation of the Magic Methods\n","\n"," 1.dd a stri\n"," • This method is called when the str() function is applied to an instance of the class, or when the instance is used in a context where a string representation is needed (e.g., print()).\n"," • It defines how the object is converted to a string. In this example, it simply returns the value attribute.\n"," 2.add__(sel\n"," • This method is called when the + operator is used on instances of the class.\n"," • In this example, it allows two CustomString objects or a CustomString and a regular string to be added together, resulting in a new CustomString instance with the concatenated value.\n","\n","Usage Example\n","\n","# Create instances of CustomString\n","s1 = CustomString(\"Hello\")\n","s2 = CustomString(\"World\")\n","\n","# Use the + operator\n","result = s1 + s2\n","print(result)  # Output: HelloWorld\n","\n","# Add a CustomString object to a regular string\n","result2 = s1 + \" Python\"\n","print(result2)  # Output: Hello Python\n","\n","# Use str() or print() on a CustomString instance\n","print(str(s1))  # Output: Hello\n","print(s1)       # Output: Hello\n","\n","#12. Create a decorator that measures and prints the execution time of a function.?\n","\n","* Here is a Python decorator that measures and prints the execution time of a function:\n","\n","import time\n","\n","def measure_execution_time(func):\n","    def wrapper(*args, **kwargs):\n","        start_time = time.time()  # Record the start time\n","        result = func(*args, **kwargs)  # Call the original function\n","        end_time = time.time()  # Record the end time\n","        execution_time = end_time - start_time\n","        print(f\"Execution time of {func.__name__}: {execution_time:.6f} seconds\")\n","        return result  # Return the result of the original function\n","    return wrapper\n","\n","# Example usage:\n","@measure_execution_time\n","def example_function(n):\n","    total = 0\n","    for i in range(n):\n","        total += i\n","    return total\n","\n","example_function(1000000)\n","\n","How It Works:\n","\n"," 1. The measure_execution_time function is a decorator.\n"," 2. It wraps the target function (func) with additional code to:\n"," • Record the time before and after the function execution using time.time().\n"," • Calculate and print the execution time.\n"," 3. The wrapper also ensures the original function’s result is returned unchanged.\n","\n","You can use this decorator on any function to measure its execution time.\n","\n","#13. Explain the concept of the Diamond Problem in multiple inheritance. How does Python resolve it?\n","\n","*The diamond problem occurs in multiple inheritance when a class inherits from two classes that both inherit from a common base class. This can create ambiguity about which version of the base class’s attributes or methods should be used in the derived class.\n","\n","The Structure of the Diamond Problem\n","\n","Consider the following class hierarchy:\n","\n","      A\n","     / \\\n","    B   C\n","     \\ /\n","      D\n","\n","Here:\n"," 1. Class A is the base class.\n"," 2. Classes B and C inherit from A.\n"," 3. Class D inherits from both B and C.\n","\n","If A has a method (say some_method), and both B and C override it, D may inherit conflicting versions of the method from B and C. The question arises: Which version of the method should D use?\n","\n","Resolving the Diamond Problem in Python\n","\n","Python resolves this ambiguity using the Method Resolution Order (MRO). Python’s MRO follows the C3 Linearization Algorithm, which ensures a deterministic and consistent order of inheritance. The MRO determines the sequence in which Python searches for attributes or methods when they are called.\n","\n","How MRO Works\n","\n"," 1. The MRO lists the classes in the order they should be checked for method or attribute resolution.\n"," 2. In the diamond structure above, D’s MRO might look like this:\n","\n","D -> B -> C -> A\n","\n","This ensures that:\n"," • D checks B first.\n"," • If the method or attribute isn’t found in B, it moves to C, and so on.\n","\n","Inspecting MRO in Python\n","\n","You can view the MRO of a class using:\n"," • The mro attribute.\n"," • The mro() method.\n"," • The help(class_name) function.\n","\n","For example:\n","\n","class A:\n","    def some_method(self):\n","        print(\"A's method\")\n","\n","class B(A):\n","    def some_method(self):\n","        print(\"B's method\")\n","\n","class C(A):\n","    def some_method(self):\n","        print(\"C's method\")\n","\n","class D(B, C):\n","    pass\n","\n","print(D.mro())\n","\n","Output:\n","\n","[<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>]\n","\n","#14. Write a class method that keeps track of the number of instances created from a class.?\n","\n","* Here’s a Python example of a class method that keeps track of the number of instances created from a class:\n","\n","class InstanceCounter:\n","    # Class variable to keep track of the count\n","    instance_count = 0\n","\n","    def __init__(self):\n","        # Increment the count whenever a new instance is created\n","        InstanceCounter.instance_count += 1\n","\n","    @classmethod\n","    def get_instance_count(cls):\n","        \"\"\"Class method to return the current instance count.\"\"\"\n","        return cls.instance_count\n","\n","\n","# Example usage:\n","obj1 = InstanceCounter()\n","obj2 = InstanceCounter()\n","obj3 = InstanceCounter()\n","\n","print(InstanceCounter.get_instance_count())  # Output: 3\n","\n","Explanation:\n","\n"," 1. Class Variable: instance_count is a class-level attribute shared by all instances of the class. It is incremented each time an instance is created.\n"," 2. Constructor (__init__): Each time the constructor is called, the instance_count is incremented.\n"," 3. Class Method: The @classmethod decorator allows the get_instance_count method to access the class attribute instance_count using the cls parameter. This makes it accessible without needing an instance of the class.\n","\n","#15. Implement a static method in a class that checks if a given year is a leap year.?\n","\n"," * Here’s an example of how to implement a static method in a class that checks if a given year is a leap year in Python:\n","\n","class YearUtils:\n","    @staticmethod\n","    def is_leap_year(year):\n","        \"\"\"\n","        Checks if the given year is a leap year.\n","\n","        Args:\n","            year (int): The year to check.\n","\n","        Returns:\n","            bool: True if the year is a leap year, False otherwise.\n","        \"\"\"\n","        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n","            return True\n","        return False\n","\n","# Example usage:\n","print(YearUtils.is_leap_year(2024))  # Output: True\n","print(YearUtils.is_leap_year(1900))  # Output: False\n","print(YearUtils.is_leap_year(2000))  # Output: True\n","\n","Explanation:\n","\n"," 1. Static Method: The @staticmethod decorator is used to indicate that the method does not depend on the instance or class state.\n"," 2. Leap Year Rule:\n"," • A year is a leap year if:\n"," • It is divisible by 4 and not divisible by 100, or\n"," • It is divisible by 400.\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"]}]}